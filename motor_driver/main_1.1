#include <stdint.h>
#include <stdbool.h>
#include "15348.h"
#include "timer.h"

#define PF0 (*((volatile uint32_t *)0x40025004))
#define PF4 (*((volatile uint32_t *)0x40025040))
#define PE0 (*((volatile uint32_t *)0x40024004))
#define PE1 (*((volatile uint32_t *)0x40024008))
#define PE2 (*((volatile uint32_t *)0x40024010))
#define PE3 (*((volatile uint32_t *)0x40024020))
#define PE4 (*((volatile uint32_t *)0x40024040))
#define PE5 (*((volatile uint32_t *)0x40024080))

void PLLInit()
{
    SYSCTL_RCC2_R |= 0x80000000;
    SYSCTL_RCC2_R |= 0x00000800;
    SYSCTL_RCC_R = (SYSCTL_RCC_R & ~0x000007C0) + 0x00000540;
    SYSCTL_RCC2_R &= ~0x00000070;
    SYSCTL_RCC2_R &= ~0x00002000;
    SYSCTL_RCC2_R |= 0x40000000;
    SYSCTL_RCC2_R = (SYSCTL_RCC2_R & ~0x1FC00000) + (4 << 22);
    while ((SYSCTL_RIS_R &0x00000040)==0){};
    SYSCTL_RCC2_R &= ~0x00000800;
}

void PWM_Init(uint16_t period1, uint16_t match1, uint16_t period2, uint16_t match2){ 
	SYSCTL_RCGCTIMER_R |= 0x03; //active timer0 and timer1
	SYSCTL_RCGCGPIO_R |= 0x02; // activate PORTB
	GPIO_PORTB_AFSEL_R = 0x50; // PB6
	GPIO_PORTB_DEN_R = 0x50;
	GPIO_PORTB_PCTL_R = 0xF7F7FFFF; //Timer0A
	TIMER0_CTL_R &= ~0x00000001;
	TIMER0_CFG_R = 0x04; // 16 bit timer
	TIMER0_TAMR_R = 0x0000000A; // PWM and periodic mode
	TIMER0_TAILR_R = period1; //period - 1; // This is where the timer starts
	TIMER0_TAMATCHR_R = match1; //period-high-1; // point to make output low
	TIMER0_CTL_R |= 0x00000001;
	NVIC_PRI4_R = (NVIC_PRI4_R&0x00FFFFFF) | 0x40000000;
	NVIC_EN0_R = 1<<19; 
	
	//SYSCTL_RCGCTIMER_R |= 0x02; //active timer1
	//SYSCTL_RCGCGPIO_R |= 0x02; // activate PORTB
	//GPIO_PORTB_AFSEL_R = 0x10; // PB4
	//GPIO_PORTB_DEN_R |= 0x10;
	//GPIO_PORTB_PCTL_R = 0xF7F7FFFF; //Timer1A
	TIMER1_CTL_R &= ~0x00000001;
	TIMER1_CFG_R = 0x04; // 16 bit timer
	TIMER1_TAMR_R = 0x0000000A; // PWM and periodic mode
	TIMER1_TAILR_R = period2; //period - 1; // This is where the timer starts
	TIMER1_TAMATCHR_R = match2; //period-high-1; // point to make output low
	TIMER1_CTL_R |= 0x00000001;
	NVIC_PRI4_R = (NVIC_PRI4_R&0x00FFFFFF) | 0x40000000;
	NVIC_EN0_R = 1<<21; 
}

/*
 * main.c
 */
int main(void) 
{
    PLLInit();
    /** your code here **/
	
		/** port initializations **/

		// enable clock for port E and F
		SYSCTL_RCGCGPIO_R |= 0x30;
		
		// unlock GPIOCR register
		GPIO_PORTF_LOCK_R = 0x4c4f434b;
		GPIO_PORTE_LOCK_R = 0x4c4f434b;
		
		// enable bits in commit register
		GPIO_PORTF_CR_R = 0xFF;
		GPIO_PORTE_CR_R = 0xFF;	
	
		// disable analog
		GPIO_PORTF_AMSEL_R = 0x00;
		GPIO_PORTE_AMSEL_R = 0x00;
		
		// disable alternate functionality
		GPIO_PORTF_AFSEL_R = 0x00;
		GPIO_PORTE_AFSEL_R = 0x00;
		
		GPIO_PORTF_PCTL_R = 0x00000000;
		GPIO_PORTE_PCTL_R = 0x00000000;
		
		// enable pull up registers
		GPIO_PORTF_PUR_R = 0x11; // enables for F0 and F4
		GPIO_PORTE_PDR_R = 0x00;
		
		// enable digital IO
		GPIO_PORTF_DEN_R = 0xFF;
		GPIO_PORTE_DEN_R = 0xFF;
		
		GPIO_PORTF_DIR_R = 0x00;
		GPIO_PORTE_DIR_R = 0x1F;
	
		// main loop
		int i = 0;
		int forward = 1;
		int left = 0;
		int right = 0;
		int debouncer=0;
		int paused=0;
		int timer=0;
		PWM_Init(50000, 45000,
						 50000, 5000);
		PE4 = 0;
		int counter = 0;
		while(1) {
				if (!PF0) {
					PE4 = 16;
					if (counter == 0)
					{
						TIMER0_TAMATCHR_R = 25000;
						TIMER1_TAMATCHR_R = 25000;
					}
					else if (counter == 1)
					{
						TIMER0_TAMATCHR_R = 45000;
						TIMER1_TAMATCHR_R = 5000;
					}
					else if (counter == 2)
					{
						forward = 0;
						TIMER0_TAMATCHR_R = 25000;
						TIMER1_TAMATCHR_R = 25000;
					}
					else if (counter == 3)
					{
						forward = 1;
						TIMER0_TAMATCHR_R = 5000;
						TIMER1_TAMATCHR_R = 45000;
					}
					counter = (counter + 1)%4;
					while (!PF0);
					for (i = 0; i < 100; i++);
				}
				if (!PF4) PE4 = 0;
			
				if (forward)
				{
					PE0 = 0;
					PE1 = 0x2;
					PE2 = 0;
					PE3 = 0x8;
				}
				else if (!forward)
				{
					PE0 = 0x1;
					PE1 = 0;
					PE2 = 0x4;
					PE3 = 0;
				}
		}
}
