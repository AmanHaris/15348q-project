#include <stdint.h>
#include <stdbool.h>
#include "15348.h"
#include "timer.h"

#define PF0 (*((volatile uint32_t *)0x40025004))
#define PF1 (*((volatile uint32_t*)0x40025008))
#define PF2 (*((volatile uint32_t*)0x40025010))
#define PF4 (*((volatile uint32_t *)0x40025040))
#define PE0 (*((volatile uint32_t *)0x40024004))
#define PE1 (*((volatile uint32_t *)0x40024008))
#define PE2 (*((volatile uint32_t *)0x40024010))
#define PE3 (*((volatile uint32_t *)0x40024020))
#define PE4 (*((volatile uint32_t *)0x40024040))
#define PE5 (*((volatile uint32_t *)0x40024080))
	
#define PD0 (*((volatile uint32_t*)0x40007004))
#define PD1 (*((volatile uint32_t*)0x40007008))
#define PD2 (*((volatile uint32_t*)0x40007010))
#define PD3 (*((volatile uint32_t*)0x40007020))
#define PD6 (*((volatile uint32_t*)0x40007100))
	
// servo motor
#define PE5 (*((volatile uint32_t*)0x40024080))
	
#define MAX(A, B) ((A) > (B) ? (A) : (B))
#define MIN(A, B) ((A) < (B) ? (A) : (B))
#define MIN_WAIT_TIME 3
#define MAX_WAIT_TIME 12

#define MIN_PULSE_RANGE 600
#define MAX_PULSE_RANGE 2300

#define ADC_THRESHOLD (2600)
#define DEBOUNCE_CNT_MAX (5)

void PLLInit()
{
    SYSCTL_RCC2_R |= 0x80000000;
    SYSCTL_RCC2_R |= 0x00000800;
    SYSCTL_RCC_R = (SYSCTL_RCC_R & ~0x000007C0) + 0x00000540;
    SYSCTL_RCC2_R &= ~0x00000070;
    SYSCTL_RCC2_R &= ~0x00002000;
    SYSCTL_RCC2_R |= 0x40000000;
    SYSCTL_RCC2_R = (SYSCTL_RCC2_R & ~0x1FC00000) + (4 << 22);
    while ((SYSCTL_RIS_R &0x00000040)==0){};
    SYSCTL_RCC2_R &= ~0x00000800;
}

uint32_t delay=0;

void ADC0_InitTMTriggerSeq3_Ch9() {
	SYSCTL_RCGCADC_R |= 0x01; // 6) activate ADC0
	SYSCTL_RCGCGPIO_R |= 0x08; // 1) activate clock for Port D
	delay = SYSCTL_RCGCADC_R; // extra time to stabilize	
	while((SYSCTL_PRGPIO_R&0x10) == 0){};
	GPIO_PORTD_DIR_R &= ~0x08; // 2) make PE4 input
	GPIO_PORTD_AFSEL_R |= 0x08; // 3) enable alternate fun on PE4
	GPIO_PORTD_DEN_R &= ~0x08; // 4) disable digital I/O on PE4
	GPIO_PORTD_AMSEL_R |= 0x08; // 5) enable analog fun on PE4
	ADC0_PC_R = 0x01; // 7) configure for 125K
	ADC0_SSPRI_R = 0x0123; // 8) Seq 3 is highest priority
	SYSCTL_RCGCTIMER_R |= 0x01; // activate timer0
	delay = SYSCTL_RCGCADC_R;
	TIMER0_CTL_R = 0; // disable timer0 during setup
	TIMER0_CTL_R |= 0x20; // enable timer0A trigger on ADC
	TIMER0_CFG_R = 0; // 32 bit timer
	TIMER0_TAMR_R = 0x02; // periodic mode
	TIMER0_TAPR_R = 0;
	TIMER0_TAILR_R = 0xFFFF;
	//TIMER0_IMR_R = 0x0;	// disable all interrupts?
	TIMER0_CTL_R |= 0x01; // enable timer0 interrupt
	ADC0_ACTSS_R &= ~0x0008; // 9) disable sample sequencer 3
	ADC0_EMUX_R = (ADC0_EMUX_R&0xFFFF0FFF) + 0x5000; // 10) seq3 is timer trigger
	ADC0_SSMUX3_R = 4; //(ADC0_SSMUX3_R&0xFFFFFFF0)+9; // 11) Ain9 (PE4)
	ADC0_SSCTL3_R = 0x0006; // 12) no TS0 D0, yes IE0 END0
	ADC0_IM_R |= 0x0008; // 13) enable SS3 interrupts
	ADC0_ACTSS_R |= 0x0008; // 14) enable sample sequencer 3
	NVIC_PRI4_R = (NVIC_PRI4_R&0xFFFF00FF) | 0x00004000; // interrupt priority
	NVIC_EN0_R = 1<<17; // Enable interrupt 17
}

static unsigned int ADCValue;
void ADC0Seq3_Handler(void){
	ADC0_ISC_R = 0x08; // ACK the interrupt (seq3 completion)
	ADCValue = ADC0_SSFIFO3_R; // read the ADC value
	//SerialWriteInt(ADCValue);
}


void PWM_Init(uint16_t period1, uint16_t match1, uint16_t period2, uint16_t match2){ 
	SYSCTL_RCGCTIMER_R |= 0x03; //active timer0 and timer1
	SYSCTL_RCGCGPIO_R |= 0x02; // activate PORTB
	GPIO_PORTB_AFSEL_R = 0x50; // PB6
	GPIO_PORTB_DEN_R = 0x50;
	GPIO_PORTB_PCTL_R = 0xF7F7FFFF; //Timer0A
	TIMER0_CTL_R &= ~0x00000001;
	TIMER0_CFG_R = 0x04; // 16 bit timer
	TIMER0_TAMR_R = 0x0000000A; // PWM and periodic mode
	TIMER0_TAILR_R = period1; //period - 1; // This is where the timer starts
	TIMER0_TAMATCHR_R = match1; //period-high-1; // point to make output low
	TIMER0_CTL_R |= 0x00000001;
	NVIC_PRI4_R = (NVIC_PRI4_R&0x00FFFFFF) | 0x40000000;
	NVIC_EN0_R = 1<<19; 
	
	//SYSCTL_RCGCTIMER_R |= 0x02; //active timer1
	//SYSCTL_RCGCGPIO_R |= 0x02; // activate PORTB
	//GPIO_PORTB_AFSEL_R = 0x10; // PB4
	//GPIO_PORTB_DEN_R |= 0x10;
	//GPIO_PORTB_PCTL_R = 0xF7F7FFFF; //Timer1A
	TIMER1_CTL_R &= ~0x00000001;
	TIMER1_CFG_R = 0x04; // 16 bit timer
	TIMER1_TAMR_R = 0x0000000A; // PWM and periodic mode
	TIMER1_TAILR_R = period2; //period - 1; // This is where the timer starts
	TIMER1_TAMATCHR_R = match2; //period-high-1; // point to make output low
	TIMER1_CTL_R |= 0x00000001;
	NVIC_PRI4_R = (NVIC_PRI4_R&0x00FFFFFF) | 0x40000000;
	NVIC_EN0_R = 1<<21; 
}

void portDSetup() {
	// configure D0, D1, D2, D3, D6 as outputs
	SYSCTL_RCGCGPIO_R |= 0x08; // enable clock for PORT D
	GPIO_PORTD_LOCK_R = 0x4C4F434B;  // this value unlocks the GPIOCR register.
	GPIO_PORTD_CR_R = 0xFF;
	GPIO_PORTD_AMSEL_R = 0x00;       // disable analog functionality
	GPIO_PORTD_PCTL_R = 0x00000000;  // Select GPIO mode in PCTL
	GPIO_PORTD_DIR_R = 0x4F;         // Ports D0-3 and 6 are output
	GPIO_PORTD_AFSEL_R = 0x00;       // Disable alternate functionality
	GPIO_PORTD_DEN_R = 0xFF; 	     // Enable digital ports
}


void portESetup() {
	// 2- configure E0, E1, E2, E3, E5 as outputs
	// port E setup
	SYSCTL_RCGCGPIO_R |= 0x10; // enable clock for PORT E
	GPIO_PORTE_LOCK_R = 0x4C4F434B;  // this value unlocks the GPIOCR register.
	GPIO_PORTE_CR_R = 0xFF;
	GPIO_PORTE_AMSEL_R = 0x00;       // disable analog functionality
	GPIO_PORTE_PCTL_R = 0x00000000;  // Select GPIO mode in PCTL
	GPIO_PORTE_DIR_R = 0x2F;         // Ports E0-E3 and E5 are output, E4 is input
	GPIO_PORTE_AFSEL_R = 0x00;       // Disable alternate functionality
	GPIO_PORTE_DEN_R = 0xFF; 	     // Enable digital ports
	GPIO_PORTE_PDR_R = 0x10; 	     // enable pullup resistors on PE4
	
}

void portFSetup() {
	// port F setup 
	SYSCTL_RCGCGPIO_R |= 0x20; 	    // enable clock for PORT F
	GPIO_PORTF_LOCK_R = 0x4C4F434B; // this value unlocks the GPIOCR register.
	GPIO_PORTF_CR_R = 0xFF;
	GPIO_PORTF_AMSEL_R = 0x00;      // disable analog functionality
	GPIO_PORTF_PCTL_R = 0x00000000; // Select GPIO mode in PCTL
	GPIO_PORTF_DIR_R = 0x0E;        // Port F0 & F4 are input, rest are output
	GPIO_PORTF_AFSEL_R = 0x00;      // Disable alternate functionality
	GPIO_PORTF_DEN_R = 0xFF;        // Enable digital ports
	GPIO_PORTF_PUR_R = 0x11; 		// enable pullup resistors on PF0 and PF4
}

/*
 * main.c
 */
int main(void) 
{
    PLLInit();
		ADC0_InitTMTriggerSeq3_Ch9();
    /** your code here **/
	
		/** port initializations **/

		// enable clock for port E and F
		SYSCTL_RCGCGPIO_R |= 0x30;
		
		// unlock GPIOCR register
		GPIO_PORTF_LOCK_R = 0x4c4f434b;
		//GPIO_PORTE_LOCK_R = 0x4c4f434b;
		
		// enable bits in commit register
		GPIO_PORTF_CR_R = 0xFF;
		//GPIO_PORTE_CR_R = 0xFF;	
	
		// disable analog
		GPIO_PORTF_AMSEL_R = 0x00;
		//GPIO_PORTE_AMSEL_R = 0x00;
		
		// disable alternate functionality
		GPIO_PORTF_AFSEL_R = 0x00;
		//GPIO_PORTE_AFSEL_R = 0x00;
		
		GPIO_PORTF_PCTL_R = 0x00000000;
		//GPIO_PORTE_PCTL_R = 0x00000000;
		
		// enable pull up registers
		GPIO_PORTF_PUR_R = 0x11; // enables for F0 and F4
		//GPIO_PORTE_PDR_R = 0x00;
		
		// enable digital IO
		GPIO_PORTF_DEN_R = 0xFF;
		//GPIO_PORTE_DEN_R = 0xFF;
		
		GPIO_PORTF_DIR_R = 0x00;
		//GPIO_PORTE_DIR_R = 0x1F;
	
		portDSetup();
		portESetup();
		portFSetup();
		// main loop
		// motor driver init
		int i = 0;
		int forward = 1;
		int left = 0;
		int right = 0;
		int debouncer=0;
		int paused=0;
		int timer=0;
		PWM_Init(50000, 25000,
						 50000, 25000);
		PE4 = 0;
		int counter = 0;
		
		// servo motor init
		bool debouncePhase = false;
		uint32_t waitTime = 4;
		uint32_t debounceCNT = 0;
	
		bool sw1Pressed = false;
		bool sw1Pushed = false;
		bool sw2Pressed = false;
		bool sw2Pushed = false;
		bool pb3Pressed = false;
		bool pb3Pushed = false;
	
		uint32_t pulseRange = MIN_PULSE_RANGE;
		uint32_t vel = 1;
		uint32_t velcnt = 0;
		while(1) {
				/*if (!PF0) {
					PD6 = 64;
					if (counter == 0)
					{
						//forward
						PE0 = 0;
						PE1 = 2;
						PD2 = 0;
						PD3 = 0x8;
					}
					else if (counter == 1)
					{
						//backward
						PE0 = 1;
						PE1 = 0;
						PD2 = 0x4;
						PD3 = 0;
					
					}
					else if (counter == 2)
					{
						//rotate right
						PE0 = 1;
						PE1 = 0; 
						PD2 = 0;
						PD3 = 0x8;
					
					}
					else if (counter == 3)
					{
						//rotate left
						PE0 = 0;
						PE1 = 2;
						PD2 = 0x4;
						PD3 = 0;
					
					}
					counter = (counter + 1)%4;
					while (!PF0);
					for (i = 0; i < 100; i++);
				}
				if (!PF4) PD6 = 0;*/
				
	 /********************************************** servo code **********************************************************/
		
		if (PF4 == 0) pulseRange += 1*vel;
		if (PF0 == 0) pulseRange -= 1*vel;
		
		
		if (ADCValue > ADC_THRESHOLD) {
			SerialWrite("Boom. headshot\n");
		}
		
		if (debouncePhase) {
			debounceCNT--;
			if (!debounceCNT) debouncePhase = false;
		
		} else {
			//  
			if (!PF0 || !PF4 || PE4 == 0x10) {
				// check if SW1 or SW2 were pressed
				if (PF0 == 0)
					sw2Pressed = true;
				else if (PF4 == 0)
					sw1Pressed = true;
				else if (PE4 == 0x10) 
					pb3Pressed = true;
						
				debouncePhase = true;
				debounceCNT = DEBOUNCE_CNT_MAX;
				continue;
			}
			
			/*** no buttons were pressed, and we are not in debounce phase ***/
			sw2Pushed = PF0 == 0;	// this check is unnecessary but is a sanity check
			sw1Pushed = PF4 == 0;
			pb3Pushed = PE4 == 0x10;
			
			// check if SW1 was released (pressed && !pushed)
			if (sw1Pressed && !sw1Pushed) {
				// increase speed
				//pulseRange += 50;
				vel = 1;
				sw1Pressed = false;
			} else if (sw2Pressed && !sw2Pushed) {
				// decrease speed
				//pulseRange -= 50;
				vel = 1;
				sw2Pressed = false;
			}
			
			if (sw1Pressed || sw2Pressed || pb3Pressed) {
				debouncePhase = true;
				debounceCNT = DEBOUNCE_CNT_MAX;
				continue;
			}
		}
		
		
		// write HIGH-pulse-LOW to servo
		PE5 = 0x20;
		SysTick_Wait100microsec(pulseRange / 100);
		PE5 = 0x00;
		
		for (uint16_t i = 0; i < waitTime; ++i) {
			SysTick_Wait1ms(waitTime);
		}
		
		velcnt++;
		if (velcnt > 3) {
			vel += 2;
			vel = MIN(100, MAX(vel, 1));
			velcnt = 0;
		}
		
		if (pulseRange < MIN_PULSE_RANGE || pulseRange > MAX_PULSE_RANGE) {
			// clamp into [MIN_PULSE, MAX_PULSE]
			pulseRange = MIN(MAX_PULSE_RANGE, MAX(pulseRange, MIN_PULSE_RANGE));
		}
		
			
		}
}
